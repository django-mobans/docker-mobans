{% set _list_types = ['list', 'CommentedSeq'] %}
{% set _any = False %}
{% if image.comment %}
# {{ image.comment }}

{% endif %}
{% if image.parent %}
FROM {{ image.parent }}
{% elif image.python_version and image.node_version %}
FROM okdocker/pynode:{{ image.python_version }}-{{ image.node_version }}.x
{% else %}
FROM scratch
{% endif %}

{% include 'label.jj2' %}

{% if image.env %}
ENV {% for key, value in image.env.items() %}
{%     if value.__class__.__name__ in _list_types %}
{{ key }}={% for item in value %}{{ item }}{% if not loop.last %}:{% endif %}{% endfor %}
{%     else %}
{{ key }}={{ value }}
{%-    endif %}{% if not loop.last %} \
    {%+ endif %}
{%   endfor %}


{% endif %}
{% if image.apt %}
{%   set _any = True %}
{%   if image.apt.__class__.__name__ in _list_types %}
{%     set apt_packages = image.apt %}
{%     set apt_packages_only = True %}
{%   else %}
{%     set apt_packages = image.apt.packages %}
{%     set apt_packages_only = False %}
{%   endif %}
{%   if not apt_packages_only %}
{%     set _emit_run = None %}
{%     if image.apt['keys'].__class__.__name__ in _list_types %}
{%       for key in image.apt['keys'] %}
{{ 'RUN' if _emit_run == None else '  &&' }} wget -q -O - {{ key }} | apt-key add - \
{%         set _emit_run = False %}
{%       else %}
{%         set _emit_run = True %}
{%       endfor %}
{%     endif %}{# image.apt['keys'] is a list #}
{%     for line in image.apt.sources %}
{{ 'RUN' if _emit_run else '  &&' }} sh -c 'echo "{{ line }}" >> /etc/apt/sources.list.d/extra.list' \
{%       set _emit_run = False %}
{%     endfor %}
  && apt-get update \
{%   else %}{# apt_packages_only #}
RUN apt-get update \
{%   endif %}{# apt_packages_only #}
  && apt-get install --no-install-recommends -y \
{%   for dep in apt_packages %}
    {{ dep }} \
{%   endfor %}
  && apt-get clean && rm -rf /var/lib/apt/lists/*

{% elif image.apk %}
{%   set _any = True %}
RUN apk add --no-cache \
{%   for dep in image.apk %}
  {{ dep }}{% if not loop.last %} \{% endif %}

{% endfor %}

{% endif %}
{% if image.pip %}
RUN \
{%   set _any = True %}
{%   for dep in image.pip %}
  pip install --no-cache-dir '{{ dep }}'{% if not loop.last %} && \{% endif %}

{%   endfor %}

{% endif %}
{% if image.npm %}
{%   set _any = True %}
RUN npm install -g \
{%   for dep in image.npm %}
  {{ dep }} \
{%   endfor %}
  && npm cache clear --force

{% endif %}
{% if image['copy'].__class__.__name__ in _list_types %}
{% set bins = [] %}
{% for entry in image['copy'] %}
{%   set _any = True %}
{%   for src, dest in entry.items() %}
COPY {{ src }} {{ dest }}

{%     if dest.endswith('/bin/') %}
{%       set _ = bins.append(dest + '*') %}
{%     endif %}
{%   endfor %}
{% endfor %}
{%   if bins and image.set_executable_on_copy %}
RUN chmod a+x {{ ' '.join(bins | unique) }}

{%   endif %}
{% endif %}
{% for layer in image.layers %}
{% set _any = True %}
{%   if layer.__class__.__name__ in _list_types %}
{%     set cmds = layer %}
{%    else %}
{%     set cmds = [layer] %}
{%    endif %}
{%    set cmd = ' \\\n  && '.join(cmds) %}
RUN {{ cmd }}

{% endfor %}
{% if image.run %}
{% if image.run.cmd %}
CMD [{% for cmd in image.run.cmd.split(' ') %}"{{ cmd }}"{% if not loop.last %}, {% endif %}{% endfor %}]

{% endif %}
{% if image.run.workdir %}
WORKDIR {{ image.run.workdir }}

{% endif %}
{% if image.run.user %}
USER {{ image.run.user }}

{% endif %}
{% endif %}
{% if image.ports %}
EXPOSE {{ image.ports }}

{% endif %}
{% if image.healthcheck %}
HEALTHCHECK --interval={{ image.healthcheck.interval }} \
            --timeout={{ image.healthcheck.timeout }} \
            --start-period={{ image.healthcheck.start_period }} \
  CMD {{ image.healthcheck.cmd }}

{% endif %}
{% if not _any %}
ADD . /
{% endif %}
